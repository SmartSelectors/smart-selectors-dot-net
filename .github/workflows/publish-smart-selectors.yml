name: Build and Publish SmartSelectors NuGet Package

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "3.1.x"

      - name: Extract Project Version
        id: get_version
        run: |
          $fileContent = [xml](Get-Content SmartSelectors/SmartSelectors/SmartSelectors.csproj)
          $version = $fileContent.Project.PropertyGroup.Version
          Write-Output "Project version is $version"
          Add-Content -Path $env:GITHUB_ENV -Value "PROJECT_VERSION=$version"
        shell: pwsh

      - name: Install NuGet CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y nuget

      - name: Get Published Version
        id: get_published_version
        run: |
          $packageName = "SmartSelectors"
          $versionList = nuget list $packageName -Source https://api.nuget.org/v3/index.json | Where-Object {
            $_ -match "^$packageName\s"
          }
          $latestVersion = if ($versionList) {
            $versionList -split '\s+' | Select-Object -Last 1
          } else {
            Write-Error "No versions found for $packageName."
          }
          Write-Output "Published version is $latestVersion"
          Add-Content -Path $env:GITHUB_ENV -Value "PUBLISHED_VERSION=$latestVersion"
        shell: pwsh

      - name: Check if versions differ
        run: |
          if ("${{ env.PROJECT_VERSION }}" -ne "${{ env.PUBLISHED_VERSION }}") {
            Write-Output "New version found: $env:PROJECT_VERSION. Publishing..."
            Add-Content -Path $env:GITHUB_ENV -Value "SHOULD_PUBLISH=true"
          } else {
            Add-Content -Path $env:GITHUB_ENV -Value "SHOULD_PUBLISH=false"
          }
        shell: pwsh

      - name: Publish Package if Version Changed
        if: env.SHOULD_PUBLISH == 'true'
        run: |
          Write-Output "Publishing SmartSelectors package..."
          dotnet build --configuration Release SmartSelectors/SmartSelectors/SmartSelectors.csproj
          dotnet pack --configuration Release --no-build --output nupkgs SmartSelectors/SmartSelectors/SmartSelectors.csproj
          dotnet nuget push "nupkgs/*.nupkg" --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json
        shell: pwsh
